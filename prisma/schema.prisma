// =========================================================
// Prisma Schema
// =========================================================

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =========================
enum Role {
  ADMIN
  RECRUITER
  CANDIDATE
}

enum EmploymentType {
  FULL_TIME
  PART_TIME
  CONTRACT
  INTERNSHIP
}

enum Seniority {
  JUNIOR
  MID
  SENIOR
  LEAD
}

enum ApplicationStatus {
  SUBMITTED
  REVIEWING
  INTERVIEW
  OFFER
  HIRED
  REJECTED
}

// CatÃ¡logo: tipo de tÃ©rmino
enum TaxonomyKind {
  SKILL
  CERTIFICATION
  LANGUAGE   // ðŸ‘ˆ NUEVO
}

// Nivel de idiomas
enum LanguageProficiency {
  NATIVE          // Nativo
  PROFESSIONAL    // C1â€“C2
  CONVERSATIONAL  // B1â€“B2
  BASIC           // A1â€“A2
}

// =========================
model Company {
  id        String   @id @default(cuid())
  name      String
  country   String?
  city      String?
  domain    String?
  users     User[]
  jobs      Job[]
  createdAt DateTime @default(now())
}

// =========================
model User {
  id           String   @id @default(cuid())
  name         String?
  email        String   @unique
  passwordHash String?
  role         Role     @default(CANDIDATE)
  createdAt    DateTime @default(now())

  applications Application[]
  jobs         Job[]         @relation("PostedJobs")

  company   Company? @relation(fields: [companyId], references: [id])
  companyId String?

  location    String?
  locationLat Float?
  locationLng Float?

  phone     String?
  birthdate DateTime?
  linkedin  String?
  github    String?
  resumeUrl String?

  // Lista unificada de skills simples (fallback)
  skills String[] @default([])

  // Certificaciones simples
  certifications String[] @default([])

  // Relaciones detalladas
  candidateSkills      CandidateSkill[]
  candidateCredentials CandidateCredential[]
  candidateLanguages   CandidateLanguage[]   // ðŸ‘ˆ NUEVO

  recruiterProfile RecruiterProfile?

  // Historial laboral (relacional)
  experiences WorkExperience[]

  @@index([locationLat, locationLng])
}

// =========================
model WorkExperience {
  id        String   @id @default(cuid())
  userId    String
  role      String
  company   String
  startDate DateTime
  endDate   DateTime?
  isCurrent Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, startDate])
  @@index([userId, isCurrent])
}

// =========================
model Job {
  id    String @id @default(cuid())
  title String

  // Requerido (multiempresa)
  companyId String
  company   Company @relation(fields: [companyId], references: [id])

  location    String
  locationLat Float?
  locationLng Float?

  employmentType EmploymentType
  seniority      Seniority
  description    String

  // Lista simple
  skills String[]

  // RelaciÃ³n opcional a catÃ¡logo
  requiredSkills JobRequiredSkill[]

  salaryMin Int?
  salaryMax Int?
  currency  String? @default("MXN")
  remote    Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  recruiterId String?
  recruiter   User?   @relation("PostedJobs", fields: [recruiterId], references: [id])

  applications Application[]

  @@index([companyId])
  @@index([title])
  @@index([location])
  @@index([seniority, employmentType])
  @@index([locationLat, locationLng])
}

// =========================
model Application {
  id          String            @id @default(cuid())
  jobId       String
  candidateId String
  resumeUrl   String?
  coverLetter String?
  status      ApplicationStatus @default(SUBMITTED)
  createdAt   DateTime          @default(now())

  // LÃ³gica de rechazo diferido
  rejectedAt         DateTime?
  rejectionEmailSent Boolean   @default(false)

  candidate User @relation(fields: [candidateId], references: [id])
  job       Job  @relation(fields: [jobId], references: [id])

  messages Message[]

  @@unique([candidateId, jobId])
  @@index([status, createdAt])
  @@index([status, rejectedAt, rejectionEmailSent])
}

// =========================
model CodexEntry {
  id        String   @id @default(cuid())
  title     String
  slug      String   @unique
  excerpt   String?
  content   String   @db.Text
  tags      String[]
  tech      String?
  published Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([published, createdAt])
}

// =========================
enum RecruiterStatus {
  PENDING
  APPROVED
  REJECTED
}

model RecruiterProfile {
  id        String          @id @default(cuid())
  userId    String          @unique
  company   String
  website   String?
  phone     String?
  status    RecruiterStatus @default(PENDING)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  user User @relation(fields: [userId], references: [id])
}

// =========================
model Message {
  id            String   @id @default(cuid())
  applicationId String
  fromUserId    String
  toUserId      String
  body          String
  createdAt     DateTime @default(now())

  application Application @relation(fields: [applicationId], references: [id])
}

model AuditLog {
  id        String   @id @default(cuid())
  actorId   String?
  action    String
  target    String?
  meta      Json?
  createdAt DateTime @default(now())
}

// =========================================================
// CatÃ¡logo editable de skills / certificaciones / idiomas
// =========================================================
model TaxonomyTerm {
  id          String       @id @default(cuid())
  kind        TaxonomyKind
  slug        String
  label       String
  aliases     String[]     @default([])
  description String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Relaciones
  requiredByJobs  JobRequiredSkill[]
  candidateSkills CandidateSkill[]
  candidateCreds  CandidateCredential[]
  candidateLangs  CandidateLanguage[]   // ðŸ‘ˆ NUEVO

  @@unique([kind, slug])
  @@index([kind])
}

// =========================
model JobRequiredSkill {
  id     String  @id @default(cuid())
  jobId  String
  termId String
  must   Boolean @default(true)
  weight Int?

  job  Job          @relation(fields: [jobId], references: [id])
  term TaxonomyTerm @relation(fields: [termId], references: [id])

  @@unique([jobId, termId])
  @@index([termId])
}

// =========================
model CandidateSkill {
  id     String @id @default(cuid())
  userId String
  termId String
  level  Int? // 1â€“5
  years  Int?

  user User         @relation(fields: [userId], references: [id])
  term TaxonomyTerm @relation(fields: [termId], references: [id])

  @@unique([userId, termId])
  @@index([termId])
}

// =========================
model CandidateLanguage {
  id     String              @id @default(cuid())
  userId String
  termId String
  level  LanguageProficiency

  user User         @relation(fields: [userId], references: [id])
  term TaxonomyTerm @relation(fields: [termId], references: [id])

  @@unique([userId, termId])
  @@index([termId])
}

// =========================
model CandidateCredential {
  id           String    @id @default(cuid())
  userId       String
  termId       String
  issuer       String?
  issuedAt     DateTime?
  expiresAt    DateTime?
  credentialId String?
  url          String?

  user User         @relation(fields: [userId], references: [id])
  term TaxonomyTerm @relation(fields: [termId], references: [id])

  @@index([termId])
  @@index([userId, termId])
}
